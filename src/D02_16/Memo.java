package D02_16;

public class Memo {
}
/*
    3일차(선형자료구조 - 스택, 큐)

    [선형자료구조]

    - 순서 -

    스택[LIFO] - 우웩

    1. 성질 : 들어가는 입구와 출구 동일
    2. 구현 : 배열 또는 연결리스트로 구현 가능

    <배열로 구현>
        - 배열이라는 저장 공간 필요 Object[]
        - 정적 구조라 max 변수 필요
        - 입출구 관리하는 top 변수 필요(입구 : ++top, 출구 : top--)
            + top은 데이터가 저장된 위치값!

        - 기능
            1. push() : 삽입 연산 = insert
            2. overflow() : 저장 공간이 없다
            3. pop() : 삭제 연산 = delete
            4. isEmpty() : 비어 있다
            ----------------------------------
            5. printAll() : 전체 출력
            6. getTop() : 제일 위에 저장된 값 출력
            7. clear() : 초기화

    <연결리스트로 구현>
        - 이미 구현된 이중연결리스트 클래스 사용

    + 연산 표기법 : 중위 / 후위 / 전위 표기법
        1) 중위 표기법 -> 후위 표기법


    큐[FIFO] - 번호표

    1. 성질 : 입구와 출구가 다르다
    2. 구현 : 배열, 연결리스트

    <배열로 구현>
        1) 선형 큐 알고리즘
            - 입구 : rear, 이동 : rear++[저장할 위치 정보]
            - 출구 : front, 이동 : front++[삭제할 위치 정보]

            - overflow 조건 : max <= rear
            - isEmpty 조건 : front == rear (이유: 큐는 바닥(front)이 가변적이기 때문에)
            * front가 이동하여 하단이 비어있어도 overflow 상태다. (가장 큰 문제점)

        2) 원형 큐 알고리즘(선형 큐 문제 개선)
            - 이동 : rear = (rear + 1) % max

            - overflow 조건 : front == rear
            - isEmpty 조건 : front == rear
            * overflow와 isEmpty가 조건이 동일(가장 큰 문제점)

        3) 개선된 원형 큐 알고리즘(원형 큐 문제를 개선)
            - 해결법 : 공간 하나를 비워두자.

            - overflow 조건 : front = (rear + 1) % max
            - isEmpty 조건 : front == rear
    
    <연결리스트로 구현>
        1) 삽입, 삭제 조합을 반대인 것으로 해야 함
        - insertFirst, removeLast
        - insertLast, removeFirst

    데크


    <팀별 프로젝트>
    - 클래스의 추상적 정의
        1) 계좌
            - 계좌번호
            - 이름
            - 잔액

            - 입금
            - 출금

        2) SRT, 버스 좌석 예약 프로그램
            - 회원 관리 : 연결리스트

            - 좌석 예약 상황 관리 : 2차원 배열
            - 대기자 : Queue
                + 예약이 다 찼을 경우
                 => 좌석을 예약한 사람이 취소할 경우 : 자동으로 해당 좌석에 예약 처리

            - 기능
                회원 관리 기능 프로그램
                버스 좌석 정보 관리 프로그램
                => 회원 정보 파일, 버스 좌석 정보를 관리 파일

                [ [1, 2] , [3, 4],
                  [1, 2] , [3, 4],
                  [1, 2] , [3, 4],
                  [1, 2] , [3, 4] ]


 */
